
#NOTE
#这个文件配置了channel1的网络文件，在main中，使用setup应用这份配置
#about fabric's channel1 network info,to be used in main
version: 1.0.0

client:
  #在这个部分中，client表示这个client连接的是哪一个org，一般来说一个sdk（client）只连接一个org
  #in this part,gonna set which org's certfication would be used by this sdk.
  organization: org3

  logging:
    level: info

  cryptoconfig:
    path: /home/go/src/fabric-go-sdk/fixtures/crypto-config

  credentialStore:

    path: "/tmp/state-store"

    cryptoStore:
      # Specific to the underlying KeyValueStore that backs the crypto key store.
      path: /tmp/msp

  BCCSP:
    security:
     enabled: true
     default:
      provider: "SW"
     hashAlgorithm: "SHA2"
     softVerify: true
     level: 256

  tlsCerts:
    # [Optional]. Use system certificate pool when connecting to peers, orderers (for negotiating TLS) Default: false
    systemCertPool: true

    # [Optional]. Client key and cert for TLS handshake with peers and orderers
    client:
      key:
        path: /home/go/src/fabric-go-sdk/fixtures/crypto-config/peerOrganizations/org3.example.com/users/User1@org3.example.com/tls/client.key
      cert:
        path: /home/go/src/fabric-go-sdk/fixtures/crypto-config/peerOrganizations/org3.example.com/users/User1@org3.example.com/tls/client.crt

#关于channel的配置
channels:



  # multi-org test channel
  mychannel3:
    #this part set the configration of peer.endorsingpeer decide if this peer participate in endorsing
    peers:
      peer0.org3.example.com:
        endorsingPeer: true
        chaincodeQuery: true
        ledgerQuery: true
        eventSource: true


      peer1.org3.example.com:
        endorsingPeer: true
        chaincodeQuery: true
        ledgerQuery: true
        eventSource: true

      
      peer0.org4.example.com:
        endorsingPeer: true
        chaincodeQuery: true
        ledgerQuery: true
        eventSource: true

      peer1.org4.example.com:
        endorsingPeer: true
        chaincodeQuery: true
        ledgerQuery: true
        eventSource: true

    policies:
      queryChannelConfig:
        minResponses: 1
        maxTargets: 1
        retryOpts:
          attempts: 5
          initialBackoff: 500ms
          maxBackoff: 5s
          backoffFactor: 2.0
  
#
# list of participating organizations in this network
#
organizations:
  org3:
    mspid: Org3MSP

    # This org's MSP store (absolute path or relative to client.cryptoconfig)
    cryptoPath:  peerOrganizations/org3.example.com/users/{username}@org3.example.com/msp

    peers:
      - peer0.org3.example.com
      - peer1.org3.example.com

  org4:
    mspid: Org4MSP

    # This org's MSP store (absolute path or relative to client.cryptoconfig)
    cryptoPath:  peerOrganizations/org4.example.com/users/{username}@org4.example.com/msp

    peers:
      - peer0.org4.example.com
      - peer1.org4.example.com 








    # [Optional]. Certificate Authorities issue certificates for identification purposes in a Fabric based
    # network. Typically certificates provisioning is done in a separate process outside of the
    # runtime network. Fabric-CA is a special certificate authority that provides a REST APIs for
    # dynamic certificate management (enroll, revoke, re-enroll). The following section is only for
    # Fabric-CA servers.


  # the profile will contain public information about organizations other than the one it belongs to.
  # These are necessary information to make transaction lifecycles work, including MSP IDs and
  # peers with a public URL to send transaction proposals. The file will not contain private
  # information reserved for members of the organization, such as admin key and certificate,
  # fabric-ca registrar enroll ID and secret, etc.
#  org3:
#    mspid: org3MSP

    # This org's MSP store (absolute path or relative to client.cryptoconfig)
#    cryptoPath:  peerOrganizations/org3.example.com/users/{username}@org3.example.com/msp

#    peers:
#      - peer0.org3.example.com



  # Orderer Org name
  ordererorg:
      # Membership Service Provider ID for this organization
      mspID: OrdererMSP

      # Needed to load users crypto keys and certs for this org (absolute path or relative to global crypto path, DEV mode)
      cryptoPath: ordererOrganizations/example.com/users/{username}@example.com/msp


#
# List of orderers to send transaction and channel create/update requests to. For the time
# being only one orderer is needed. If more than one is defined, which one get used by the
# SDK is implementation specific. Consult each SDK's documentation for its handling of orderers.
#
orderers:


  orderer.example.com:
    # [Optional] Default: Infer from hostname
    url: orderer.example.com:7050

    # these are standard properties defined by the gRPC library
    # they will be passed in as-is to gRPC client constructor
    grpcOptions:
      ssl-target-name-override: orderer.example.com
      # These parameters should be set in coordination with the keepalive policy on the server,
      # as incompatible settings can result in closing of connection.
      # When duration of the 'keep-alive-time' is set to 0 or less the keep alive client parameters are disabled
      keep-alive-time: 0s
      keep-alive-timeout: 20s
      keep-alive-permit: false
      fail-fast: false
      # allow-insecure will be taken into consideration if address has no protocol defined, if true then grpc or else grpcs
      allow-insecure: false

    tlsCACerts:
      # Certificate location absolute path
      path: /home/go/src/fabric-go-sdk/fixtures/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem

# 这里是指定sdk客户端连接的peer节点，如果连接了这个peer节点，那么就只能对这个节点进行操作，包括查询和上传信息
# List of peers to send various requests to, including endorsement, query
# and event listener registration.
#
peers:


  peer0.org3.example.com:
    # this URL is used to send endorsement and query requests
    # [Optional] Default: Infer from hostname
    url: peer0.org3.example.com:11051
    grpcOptions:
      ssl-target-name-override: peer0.org3.example.com
      # These parameters should be set in coordination with the keepalive policy on the server,
      # as incompatible settings can result in closing of connection.
      # When duration of the 'keep-alive-time' is set to 0 or less the keep alive client parameters are disabled
      keep-alive-time: 0s
      keep-alive-timeout: 20s
      keep-alive-permit: false
      fail-fast: false
      # allow-insecure will be taken into consideration if address has no protocol defined, if true then grpc or else grpcs
      allow-insecure: false
    #grpcOptions:
    #  ssl-target-name-override: peer0.org3.example.com

    tlsCACerts:
      # Certificate location absolute path
      path: /home/go/src/fabric-go-sdk/fixtures/crypto-config/peerOrganizations/org3.example.com/tlsca/tlsca.org3.example.com-cert.pem

  peer1.org3.example.com:
    url: peer1.org3.example.com:12051
    #grpcOptions:
    #  ssl-target-name-override: peer0.org3.example.com
    grpcOptions:
      ssl-target-name-override: peer1.org3.example.com
      # These parameters should be set in coordination with the keepalive policy on the server,
      # as incompatible settings can result in closing of connection.
      # When duration of the 'keep-alive-time' is set to 0 or less the keep alive client parameters are disabled
      keep-alive-time: 0s
      keep-alive-timeout: 20s
      keep-alive-permit: false
      fail-fast: false
      # allow-insecure will be taken into consideration if address has no protocol defined, if true then grpc or else grpcs
      allow-insecure: false
    tlsCACerts:
      path: /home/go/src/fabric-go-sdk/fixtures/crypto-config/peerOrganizations/org3.example.com/tlsca/tlsca.org3.example.com-cert.pem

  peer0.org4.example.com:
    # this URL is used to send endorsement and query requests
    # [Optional] Default: Infer from hostname
    url: peer0.org4.example.com:13051
    grpcOptions:
      ssl-target-name-override: peer0.org4.example.com
      # These parameters should be set in coordination with the keepalive policy on the server,
      # as incompatible settings can result in closing of connection.
      # When duration of the 'keep-alive-time' is set to 0 or less the keep alive client parameters are disabled
      keep-alive-time: 0s
      keep-alive-timeout: 20s
      keep-alive-permit: false
      fail-fast: false
      # allow-insecure will be taken into consideration if address has no protocol defined, if true then grpc or else grpcs
      allow-insecure: false
    #grpcOptions:
    #  ssl-target-name-override: peer0.org4.example.com

    tlsCACerts:
      # Certificate location absolute path
      path: /home/go/src/fabric-go-sdk/fixtures/crypto-config/peerOrganizations/org4.example.com/tlsca/tlsca.org4.example.com-cert.pem


  peer1.org4.example.com:
    url: peer1.org4.example.com:14051
    #grpcOptions:
    #  ssl-target-name-override: peer0.org4.example.com
    grpcOptions:
      ssl-target-name-override: peer1.org4.example.com
      # These parameters should be set in coordination with the keepalive policy on the server,
      # as incompatible settings can result in closing of connection.
      # When duration of the 'keep-alive-time' is set to 0 or less the keep alive client parameters are disabled
      keep-alive-time: 0s
      keep-alive-timeout: 20s
      keep-alive-permit: false
      fail-fast: false
      # allow-insecure will be taken into consideration if address has no protocol defined, if true then grpc or else grpcs
      allow-insecure: false
    tlsCACerts:
      path: /home/go/src/fabric-go-sdk/fixtures/crypto-config/peerOrganizations/org4.example.com/tlsca/tlsca.org4.example.com-cert.pem


#
# Fabric-CA is a special kind of Certificate Authority provided by Hyperledger Fabric which allows
# certificate management to be done via REST APIs. Application may choose to use a standard
# Certificate Authority instead of Fabric-CA, in which case this section would not be specified.
#
entityMatchers:
  peer:
    - pattern: (\w+).org3.example.com:(\d+)
      urlSubstitutionExp: ${1}.org3.example.com:${2}
      sslTargetOverrideUrlSubstitutionExp: ${1}.org3.example.com
      mappedHost: peer0.org3.example.com

    - pattern: (\w+).org4.example.com:(\d+)
      urlSubstitutionExp: ${1}.org4.example.com:${2}
      sslTargetOverrideUrlSubstitutionExp: ${1}.org4.example.com
      mappedHost: peer0.org4.example.com